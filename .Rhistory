pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(relabund = count/3632)
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(relabund = count/1816)
head(shared, n=10)
head(shared, n=15)
shared1 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(!group %in% c('48hr_DMSOA', '48hr_DMSOB', '48hr_Media',
'48hr_RESA', '48hr_RESB', '48hr_WEA', '48hr_WEB',
'DMSOA', 'DMSOB', 'Media', 'RESA', 'RESB', 'WEA', 'WEB')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(relabund = count/3632)
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(relabund = count/1816)
shared <- rbind(shared1, shared2)
taxonomy <- read_tsv("data/mothur/final.taxonomy") %>%
rename_all(tolower) %>%
# Split taxonomic information into separate columns for each taxonomic level
mutate(taxonomy=str_replace_all(taxonomy, c("\\(\\d*\\)" = "", #drop digits with parentheses around them
';$' = "", #removes semi-colon
'Bacteria_unclassified' = 'Unclassified',
"_unclassified" = " Unclassified"))) %>%
# Separate taxonomic levels into separate columns according to semi-colon.
separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus"), sep=';')
relevant_metadata <- rbind(metadata1,metadata48hr) %>%
select(-R1_filename, -R2_filename) %>%
filter(!Treatment %in% c("control"))
shared_taxa <- inner_join(shared, taxonomy)
###
taxa_metadata <- inner_join(shared_taxa, relevant_metadata)
top_phyla <- c("Firmicutes", "Bacteroidetes", "Proteobacteria",
"Actinobacteria", "Deferribacteres", "Fusobacteria")
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=Treatment, fill=phylum, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
View(shared2)
View(shared_taxa)
View(shared2)
shared_taxa <- inner_join(shared, taxonomy)
View(shared)
##combine the two shared so that relabund column has all numbers normalized to 1
shared <- rbind(shared1, shared2)
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=Treatment, fill=phylum, y=relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(relabund = (count*2)/3632)
##combine the two shared so that relabund column has all numbers normalized to 1
shared <- rbind(shared1, shared2)
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=Treatment, fill=phylum, y=relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
shared1 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(!group %in% c('48hr_DMSOA', '48hr_DMSOB', '48hr_Media',
'48hr_RESA', '48hr_RESB', '48hr_WEA', '48hr_WEB',
'DMSOA', 'DMSOB', 'Media', 'RESA', 'RESB', 'WEA', 'WEB')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count')
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(count = (count*2))
##combine the two shared so that relabund column has all numbers normalized to 1
shared <- rbind(shared1, shared2) %>%
mutate(relabund = count/3632)
View(shared)
View(shared1)
View(shared2)
taxonomy <- read_tsv("data/mothur/final.taxonomy") %>%
rename_all(tolower) %>%
# Split taxonomic information into separate columns for each taxonomic level
mutate(taxonomy=str_replace_all(taxonomy, c("\\(\\d*\\)" = "", #drop digits with parentheses around them
';$' = "", #removes semi-colon
'Bacteria_unclassified' = 'Unclassified',
"_unclassified" = " Unclassified"))) %>%
# Separate taxonomic levels into separate columns according to semi-colon.
separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus"), sep=';')
shared_taxa <- inner_join(shared, taxonomy)
###
taxa_metadata <- inner_join(shared_taxa, relevant_metadata)
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=Treatment, fill=phylum, y=relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
View(relevant_metadata)
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count')
shared1 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(!group %in% c('48hr_DMSOA', '48hr_DMSOB', '48hr_Media',
'48hr_RESA', '48hr_RESB', '48hr_WEA', '48hr_WEB',
'DMSOA', 'DMSOB', 'Media', 'RESA', 'RESB', 'WEA', 'WEB')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(count = (count/2))
##combine the two shared so that relabund column has all numbers normalized to 1
shared <- rbind(shared1, shared2) %>%
mutate(relabund = count/1816)
View(shared)
View(shared2)
taxonomy <- read_tsv("data/mothur/final.taxonomy") %>%
rename_all(tolower) %>%
# Split taxonomic information into separate columns for each taxonomic level
mutate(taxonomy=str_replace_all(taxonomy, c("\\(\\d*\\)" = "", #drop digits with parentheses around them
';$' = "", #removes semi-colon
'Bacteria_unclassified' = 'Unclassified',
"_unclassified" = " Unclassified"))) %>%
# Separate taxonomic levels into separate columns according to semi-colon.
separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus"), sep=';')
shared_taxa <- inner_join(shared, taxonomy)
###
taxa_metadata <- inner_join(shared_taxa, relevant_metadata)
View(shared_taxa)
top_phyla <- c("Firmicutes", "Bacteroidetes", "Proteobacteria",
"Actinobacteria", "Deferribacteres", "Fusobacteria")
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=Treatment, fill=phylum, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
View(metadata48hr)
metadata <- read_tsv("data/mothur/resv_metadata.txt") %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
mutate(Hour=factor(Hour))
shared <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(relabund = count/1816)
taxonomy <- read_tsv("data/mothur/final.taxonomy") %>%
rename_all(tolower) %>%
# Split taxonomic information into separate columns for each taxonomic level
mutate(taxonomy=str_replace_all(taxonomy, c("\\(\\d*\\)" = "", #drop digits with parentheses around them
';$' = "", #removes semi-colon
'Bacteria_unclassified' = 'Unclassified',
"_unclassified" = " Unclassified"))) %>%
# Separate taxonomic levels into separate columns according to semi-colon.
separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus"), sep=';')
top_phyla <- c("Firmicutes", "Bacteroidetes", "Proteobacteria",
"Actinobacteria", "Deferribacteres", "Fusobacteria")
shared_taxa <- inner_join(shared, taxonomy)
shared_taxa %>%
filter(phylum %in% top_phyla)
shared_taxa %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=group, fill=phylum, y=relabund)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 14, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_manual(values = colours)
shared_taxa %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=group, fill=phylum, y=relabund)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 14, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set2")
shared_taxa %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=group, fill=phylum, y=relabund)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, size = 14, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 12, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
metadata1 <- read_tsv("data/mothur/resv_metadata.txt") %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
mutate(Hour=factor(Hour))
metadata48hr <- read_tsv("data/mothur/resv_metadata.txt") %>%
rename("group" = "Group") %>%
filter(Hour == '48') %>%
mutate(Hour=factor(Hour))
relevant_metadata <- rbind(metadata1,metadata48hr) %>%
select(-R1_filename, -R2_filename) %>%
filter(!Treatment %in% c("control"))
shared1 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(!group %in% c('48hr_DMSOA', '48hr_DMSOB', '48hr_Media',
'48hr_RESA', '48hr_RESB', '48hr_WEA', '48hr_WEB',
'DMSOA', 'DMSOB', 'Media', 'RESA', 'RESB', 'WEA', 'WEB', 'S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(count = (count/2))
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count')
##combine the two shared so that relabund column has all numbers normalized to 1
shared <- rbind(shared1, shared2) %>%
mutate(relabund = count/1816)
taxonomy <- read_tsv("data/mothur/final.taxonomy") %>%
rename_all(tolower) %>%
# Split taxonomic information into separate columns for each taxonomic level
mutate(taxonomy=str_replace_all(taxonomy, c("\\(\\d*\\)" = "", #drop digits with parentheses around them
';$' = "", #removes semi-colon
'Bacteria_unclassified' = 'Unclassified',
"_unclassified" = " Unclassified"))) %>%
# Separate taxonomic levels into separate columns according to semi-colon.
separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus"), sep=';')
shared_taxa <- inner_join(shared, taxonomy)
###
taxa_metadata <- inner_join(shared_taxa, relevant_metadata)
top_phyla <- c("Firmicutes", "Bacteroidetes", "Proteobacteria",
"Actinobacteria", "Deferribacteres", "Fusobacteria")
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=Treatment, fill=phylum, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
source('~/Documents/SchlossLab/resv_microbiome/code/stacked_48hrcomparison.R')
metadata1 <- read_tsv("data/mothur/resv_metadata.txt") %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
mutate(Hour=factor(Hour))
metadata48hr <- read_tsv("data/mothur/resv_metadata.txt") %>%
rename("group" = "Group") %>%
filter(Hour == '48') %>%
mutate(Hour=factor(Hour))
relevant_metadata <- rbind(metadata1,metadata48hr) %>%
select(-R1_filename, -R2_filename) %>%
filter(!Treatment %in% c("control"))
shared1 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(!group %in% c('48hr_DMSOA', '48hr_DMSOB', '48hr_Media',
'48hr_RESA', '48hr_RESB', '48hr_WEA', '48hr_WEB',
'DMSOA', 'DMSOB', 'Media', 'RESA', 'RESB', 'WEA', 'WEB', 'S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count') %>%
mutate(count = (count/2))
shared2 <- read_tsv("data/mothur/final.0.03.subsample.shared") %>%
select(-label, -numOtus) %>%
rename("group" = "Group") %>%
filter(group %in% c('S3', 'S24', 'S26', 'S27', 'S30')) %>%
pivot_longer(-group, names_to = 'otu', values_to = 'count')
##combine the two shared so that relabund column has all numbers normalized to 1
shared <- rbind(shared1, shared2) %>%
mutate(relabund = count/1816)
taxonomy <- read_tsv("data/mothur/final.taxonomy") %>%
rename_all(tolower) %>%
# Split taxonomic information into separate columns for each taxonomic level
mutate(taxonomy=str_replace_all(taxonomy, c("\\(\\d*\\)" = "", #drop digits with parentheses around them
';$' = "", #removes semi-colon
'Bacteria_unclassified' = 'Unclassified',
"_unclassified" = " Unclassified"))) %>%
# Separate taxonomic levels into separate columns according to semi-colon.
separate(taxonomy, into=c("kingdom", "phylum", "class", "order", "family", "genus"), sep=';')
shared_taxa <- inner_join(shared, taxonomy)
###
taxa_metadata <- inner_join(shared_taxa, relevant_metadata)
top_phyla <- c("Firmicutes", "Bacteroidetes", "Proteobacteria",
"Actinobacteria", "Deferribacteres", "Fusobacteria")
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=100*relabund, fill = Treatment)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
scale_fill_brewer(palette = "Set1")
View(shared2)
View(taxa_metadata)
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ stool_id) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum")
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum")
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
theme_cowplot()
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold")) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
theme_classic()
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=100*relabund)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold"))
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=count)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "", y = "Relative Abundance (%)", fill = "Phylum") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold"))
## need to add code make Y axis equal to 100%
taxa_metadata %>%
filter(phylum %in% top_phyla) %>%
ggplot(., aes(x=stool_id, y=count)) +
geom_bar(stat = "identity") +
facet_wrap(~ phylum) +
scale_y_continuous(expand = c(0,0)) +
labs(x = "Donor ID", y = "Read Count") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8, colour = "black", vjust = 0.5, hjust = 1, face= "bold"),
axis.title.y = element_text(size = 16, face = "bold"), legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 8, face = "bold", colour = "black"),
axis.text.y = element_text(colour = "black", size = 12, face = "bold"))
setwd("~/Documents/SchlossLab/rNBA")
library(tidyverse)
library(lubridate)
library(broom)
current_date <- now()
# Load and format baseball games that have already been played
all_game_data <- read_csv(file="nba_elo.csv",
col_types=cols(.default = col_double(),
date=col_date(),
playoff=col_logical(),
team1=col_character(),
team2=col_character(),
season=col_integer(),
score1=col_integer(),
score2=col_integer())
)
# Load and format baseball games that have already been played
all_game_data <- read_csv(file="nba_elo.csv",
col_types=cols(date = col_date(),
date=col_date(),
team1=col_character(),
team2=col_character(),
season=col_integer(),
score1=col_integer(),
score2=col_integer())
) %>% filter(date < current_date)
current_date <- now()
# Load and format baseball games that have already been played
all_game_data <- read_csv(file="nba_elo.csv",
col_types=cols(date = col_date(),
date=col_date(),
team1=col_character(),
team2=col_character(),
season=col_integer(),
score1=col_integer(),
score2=col_integer())
) %>% filter(date < current_date)
setwd("~/Documents/SchlossLab/nba_wl_model")
# Load and format baseball games that have already been played
all_game_data <- read_csv(file="nba_elo.csv",
col_types=cols(date = col_date(),
date=col_date(),
team1=col_character(),
team2=col_character(),
season=col_integer(),
score1=col_integer(),
score2=col_integer())
) %>% filter(date < current_date)
favorite_win_prob <- game_data %>%
mutate(fav_538_won=ifelse(rating_prob1>rating_prob2, score1 > score2, score2 > score1),
fav_538_prob=ifelse(rating_prob1>rating_prob2, rating_prob1, rating_prob2)) %>%
select(season, date, team1, team2, fav_538_won, fav_538_prob)
favorite_win_prob <- all_game_data %>%
mutate(fav_538_won=ifelse(rating_prob1>rating_prob2, score1 > score2, score2 > score1),
fav_538_prob=ifelse(rating_prob1>rating_prob2, rating_prob1, rating_prob2)) %>%
select(season, date, team1, team2, fav_538_won, fav_538_prob)
favorite_win_prob <- all_game_data %>%
mutate(fav_538_won=ifelse(elo_prob1>elo_prob2, score1 > score2, score2 > score1),
fav_538_prob=ifelse(elo_prob1>elo_prob2, elo_prob1, elo_prob2)) %>%
select(season, date, team1, team2, fav_538_won, fav_538_prob)
head(favorite_win_prob, n=10)
# make df for this only this season
current_season <- all_game_data %>% filter(season = 2020)
# make df for this only this season
current_season <- all_game_data %>% filter(season = "2020")
# make df for this only this season
current_season <- all_game_data %>% filter(season == "2020")
